<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure.Utility</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.Utility.Mac">
            <summary>
            Mac 的摘要说明。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32">
            <summary>
            执行需要调用 <b>Win32</b> API 的操作辅助类。
            </summary>
            <summary>
            执行需要调用 <b>Win32</b> API 的操作辅助类。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.MF_BYPOSITION">
            <summary>
            Win32 API 常数，指示在使用 <see cref="M:Infrastructure.Utility.Win32.RemoveMenu(System.IntPtr,System.Int32,System.Int32)"/> 函数时指定使用索引数而不是使用ID。
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetCurrentPlatform">
            <summary>
            执行获取当前运行的操作系统版本。
            </summary>
            <returns><see cref="T:Infrastructure.Utility.Win32.Platform"/> 的值之一，他表示当前运行的操作系统版本。</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetHardDiskInfo(Infrastructure.Utility.Win32.IdSector)">
            <summary>
            根据指定的设备信息生成设备的详细信息。
            </summary>
            <param name="phdinfo">一个 <see cref="T:Infrastructure.Utility.Win32.IdSector"/></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetHddInfoNT(System.Byte)">
            <summary>
            获取在NT平台下指定序列号的硬盘信息。
            </summary>
            <param name="driveIndex">物理磁盘的数量。</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetHddInfo9X(System.Byte)">
            <summary>
            
            </summary>
            <param name="driveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            取得指定窗口的系统菜单的句柄。
            </summary>
            <param name="hwnd">指向要获取系统菜单窗口的 <see cref="T:System.IntPtr"/> 句柄。</param>
            <param name="bRevert">获取系统菜单的方式。设置为 <b>true</b>，表示接收原始的系统菜单，否则设置为 <b>false</b> 。</param>
            <returns>指向要获取的系统菜单的 <see cref="T:System.IntPtr"/> 句柄。</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetMenuItemCount(System.IntPtr)">
            <summary>
            获取指定的菜单中条目（菜单项）的数量。
            </summary>
            <param name="hMenu">指向要获取菜单项数量的系统菜单的 <see cref="T:System.IntPtr"/> 句柄。</param>
            <returns>菜单中的条目数量</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.RemoveMenu(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            删除指定的菜单条目。
            </summary>
            <param name="hMenu">指向要移除的菜单的 <see cref="T:System.IntPtr"/> 。</param>
            <param name="uPosition">欲改变的菜单条目的标识符。</param>
            <param name="uFlags"></param>
            <returns>非零表示成功，零表示失败。</returns>
            <remarks>
            如果在 <paramref name="uFlags"/> 中使用了<see cref="F:Infrastructure.Utility.Win32.MF_BYPOSITION"/> ，则在 <paramref name="uPosition"/> 参数表示菜单项的索引；
            如果在 <paramref name="uFlags"/> 中使用了 <b>MF_BYCOMMAND</b>，则在 <paramref name="uPosition"/> 中使用菜单项的ID。
            </remarks>
        </member>
        <member name="M:Infrastructure.Utility.Win32.CloseHandle(System.IntPtr)">
            <summary>
            关闭一个指定的指针对象指向的设备。。
            </summary>
            <param name="hObject">要关闭的句柄 <see cref="T:System.IntPtr"/> 对象。</param>
            <returns>成功返回 <b>0</b> ，不成功返回非零值。</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            执行打开/建立资源的功能。
            </summary>
            <param name="lpFileName">指定要打开的设备或文件的名称。</param>
            <param name="dwDesiredAccess">
            <para>Win32 常量，用于控制对设备的读访问、写访问或读/写访问的常数。内容如下表：
            <p><list type="table">
            <listheader>
            <term>名称</term>
            <description>说明</description>
            </listheader>
            <item>
            <term>GENERIC_READ</term><description>指定对设备进行读取访问。</description>
            </item>
            <item>
            <term>GENERIC_WRITE</term><description>指定对设备进行写访问。</description>
            </item>
            <item><term><b>0</b></term><description>如果值为零，则表示只允许获取与一个设备有关的信息。</description></item>
            </list></p>
            </para>
            </param>
            <param name="dwShareMode">指定打开设备时的文件共享模式</param>
            <param name="lpSecurityAttributes"></param>
            <param name="dwCreationDisposition">Win32 常量，指定操作系统打开文件的方式。内容如下表：
            <para><p>
            <list type="table">
            <listheader><term>名称</term><description>说明</description></listheader>
            <item>
            <term>CREATE_NEW</term>
            <description>指定操作系统应创建新文件。如果文件存在，则抛出 <see cref="T:System.IO.IOException"/> 异常。</description>
            </item>
            <item><term>CREATE_ALWAYS</term><description>指定操作系统应创建新文件。如果文件已存在，它将被改写。</description></item>
            </list>
            </p></para>
            </param>
            <param name="dwFlagsAndAttributes"></param>
            <param name="hTemplateFile"></param>
            <returns>使用函数打开的设备的句柄。</returns>
            <remarks>
            本函数可以执行打开或建立文件、文件流、目录/文件夹、物理磁盘、卷、系统控制的缓冲区、磁带设备、
            通信资源、邮件系统和命名管道。
            </remarks>
        </member>
        <member name="M:Infrastructure.Utility.Win32.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Infrastructure.Utility.Win32.GetVersionOutParams@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            对设备执行指定的操作。
            </summary>
            <param name="hDevice">要执行操作的设备句柄。</param>
            <param name="dwIoControlCode">Win32 API 常数，输入的是以 <b>FSCTL_</b> 为前缀的常数，定义在 
            <b>WinIoCtl.h</b> 文件内，执行此重载方法必须输入 <b>SMART_GET_VERSION</b> 。</param>
            <param name="lpInBuffer">当参数为指针时，默认的输入值是 <b>0</b> 。</param>
            <param name="nInBufferSize">输入缓冲区的字节数量。</param>
            <param name="lpOutBuffer">一个 <b>GetVersionOutParams</b> ，表示执行函数后输出的设备检查。</param>
            <param name="nOutBufferSize">输出缓冲区的字节数量。</param>
            <param name="lpBytesReturned">实际装载到输出缓冲区的字节数量。</param>
            <param name="lpOverlapped">同步操作控制，一般不使用，默认值为 <b>0</b> 。</param>
            <returns>非零表示成功，零表示失败。</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.DeviceIoControl(System.IntPtr,System.UInt32,Infrastructure.Utility.Win32.SendCmdInParams@,System.UInt32,Infrastructure.Utility.Win32.SendCmdOutParams@,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            对设备执行指定的操作。
            </summary>
            <param name="hDevice">要执行操作的设备句柄。</param>
            <param name="dwIoControlCode">Win32 API 常数，输入的是以 <b>FSCTL_</b> 为前缀的常数，定义在 
            <b>WinIoCtl.h</b> 文件内，执行此重载方法必须输入 <b>SMART_SEND_DRIVE_COMMAND</b> 或 <b>SMART_RCV_DRIVE_DATA</b> 。</param>
            <param name="lpInBuffer">一个 <b>SendCmdInParams</b> 结构，它保存向系统发送的查询要求具体命令的数据结构。</param>
            <param name="nInBufferSize">输入缓冲区的字节数量。</param>
            <param name="lpOutBuffer">一个 <b>SendCmdOutParams</b> 结构，它保存系统根据命令返回的设备相信信息二进制数据。</param>
            <param name="nOutBufferSize">输出缓冲区的字节数量。</param>
            <param name="lpBytesReturned">实际装载到输出缓冲区的字节数量。</param>
            <param name="lpOverlapped">同步操作控制，一般不使用，默认值为 <b>0</b> 。</param>
            <returns>非零表示成功，零表示失败。</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.#cctor">
            <summary>
            执行当前类在使用前的初始化操作。
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetHddInformation">
            <summary>
            获取当前用户物理磁盘的性能信息。
            </summary>
            <returns>一个 <see cref="T:Infrastructure.Utility.Win32.HDiskInfo"/> 结构，它保存了物理硬盘的性能数据。</returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.ScrollWindow(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,Infrastructure.Utility.Win32.RECT@,Infrastructure.Utility.Win32.RECT@)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="nXAmount"></param>
            <param name="nYAmount"></param>
            <param name="rectScrollRegion"></param>
            <param name="rectClip"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.SetScrollPos(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="nBar"></param>
            <param name="nPos"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.SetScrollInfo(System.Runtime.InteropServices.HandleRef,System.Int32,Infrastructure.Utility.Win32.SCROLLINFO,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="fnBar"></param>
            <param name="si"></param>
            <param name="redraw"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.GetDeviceCaps(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            
            </summary>
            <param name="hDC"></param>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.LOWORD(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Win32.LOWORD(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Win32.Platform">
            <summary>
            表示操作系统平台。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.Windows95">
            <summary>
            Windows 95 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.Windows98">
            <summary>
            Windows 98 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.Windows982ndEdition">
            <summary>
            Windows 98 第二版操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.WindowsME">
            <summary>
            Windows ME 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.WindowsNT351">
            <summary>
            Windows NT 3.51 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.WindowsNT40">
            <summary>
            Windows NT 4.0 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.Windows2000">
            <summary>
            Windows 2000 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.WindowsXP">
            <summary>
            Windows XP 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.Windows2003">
            <summary>
            Windows 2003 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.WindowsVista">
            <summary>
            Windows Vista 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.WindowsCE">
            <summary>
            Windows CE 操作系统.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.Platform.UnKnown">
            <summary>
            操作系统版本未知。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.DriverError">
            <summary>
            表示IDE设备错误状态代码的常量与数值的对应。
            </summary>
            <remarks>其数值与常量定义在 <b>WinIoCtl.h</b> 文件中。</remarks>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_NO_ERROR">
            <summary>
            设备无错误。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_IDE_ERROR">
            <summary>
            设备IDE控制器错误。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_INVALID_FLAG">
            <summary>
            无效的命令标记。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_INVALID_COMMAND">
            <summary>
            无效的命令数据。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_INVALID_BUFFER">
            <summary>
            缓冲区无效（如缓冲区为空或地址错误）。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_INVALID_DRIVE">
            <summary>
            设备编号错误。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_INVALID_IOCTL">
            <summary>
            IOCTL错误。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_ERROR_NO_MEM">
            <summary>
            无法锁定用户的缓冲区。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_INVALID_REGISTER">
            <summary>
            无效的IDE注册命令。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_NOT_SUPPORTED">
            <summary>
            无效的命令设置。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverError.SMART_NO_IDE_DEVICE">
            <summary>
            指定要查找的设别索引号无效。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.HDiskInfo">
            <summary>
            保存当前计算机 IDE 设备（硬盘）的硬件信息的结构。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.HDiskInfo.ModuleNumber">
            <summary>
            硬盘型号。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.HDiskInfo.Firmware">
            <summary>
            硬盘的固件版本。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.HDiskInfo.SerialNumber">
            <summary>
            硬盘序列号。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.HDiskInfo.Capacity">
            <summary>
            硬盘容量，以M为单位。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.HDiskInfo.BufferSize">
            <summary>
            设备缓存大小（以M为单位）。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.GetVersionOutParams">
            <summary>
            表示使用 <b>DeviceIoControl</b> 函数时保存返回的驱动器硬件信息的结构
            </summary>
            <remarks>>此数据结构定义在 <b>WinIoCtl.h</b> 文件名为 <b>_GETVERSIONINPARAMS</b> 结构中。</remarks>
        </member>
        <member name="F:Infrastructure.Utility.Win32.GetVersionOutParams.bVersion">
            <summary>
            IDE设备的二进制硬件版本。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.GetVersionOutParams.bRevision">
            <summary>
            IDE设备的二进制修订版本。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.GetVersionOutParams.bReserved">
            <summary>
            此值操作系统没有使用，使用此数据结构时被设置为 <b>0</b> 。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.GetVersionOutParams.bIDEDeviceMap">
            <summary>
            IDE设备的二进制映射。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.GetVersionOutParams.fCapabilities">
            <summary>
            IDE设备的二进制容量数据。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.GetVersionOutParams.dwReserved">
            <summary>
            保留内容，不使用。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.IdeRegs">
            <summary>
            一个数据结构，表示使用 <b>DeviceIoControl</b> 函数时发送到操作系统中的命令数据结构 <b>SendCmdInParams</b> 的成员结构。
            它表示要获取磁盘设备性能参数的具体定义规则。
            </summary>
            <seealso cref="T:Infrastructure.Utility.Win32.SendCmdInParams"/>
            <remarks>此数据结构定义在 <b>WinIoCtl.h</b> 文件名为 <b>_IDEREGS</b> 中。</remarks>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bFeaturesReg">
            <summary>
            发送到操作系统的注册命令，此为系统的 <b>SMART Command</b> 。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bSectorCountReg">
            <summary>
            获取IDE设备扇区数。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bSectorNumberReg">
            <summary>
            获取IDE设备编号。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bCylLowReg">
            <summary>
            获取IDE设备低端柱面值。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bCylHighReg">
            <summary>
            获取IDE设备高端柱面值。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bDriveHeadReg">
            <summary>
            获取IDE设备的头信息。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bCommandReg">
            <summary>
            获取IDE设备的真正命令。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdeRegs.bReserved">
            <summary>
            保留内容，此值应设置为 <b>0</b> 。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.SendCmdInParams">
            <summary>
            保存执行 <b>DeviceIoControl</b> 函数时向系统提交的执行操作命令。
            </summary>
            <seealso cref="T:Infrastructure.Utility.Win32.SendCmdInParams"/>
            <remarks>此数据结构定义在 <b>WinIoCtl.h</b> 文件名为 <b>_SENDCMDINPARAMS</b> 中。</remarks>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdInParams.cBufferSize">
            <summary>
            输出的数据缓冲大小。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdInParams.irDriveRegs">
            <summary>
            保存向系统发送的磁盘设备命令的数据结构。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdInParams.bDriveNumber">
            <summary>
            希望系统控制的物理磁盘的编号。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdInParams.bReserved">
            <summary>
            保留的数据，不使用。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdInParams.dwReserved">
            <summary>
            保留的数据，不使用。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdInParams.bBuffer">
            <summary>
            保存当前 <b>SendCmdInParams</b> 结构填充数据后的大小。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Infrastructure.Utility.Win32.DriverStatus" -->
        <member name="F:Infrastructure.Utility.Win32.DriverStatus.bDriverError">
            <summary>
            如果检查的IDE设备发生错误，保存的错误代码，<b>0</b> 表示没有错误。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverStatus.bIDEStatus">
            <summary>
            IDE设备被注册的错误内容。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverStatus.bReserved">
            <summary>
            保留的数据，不使用。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.DriverStatus.dwReserved">
            <summary>
            保留的数据，不使用。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.SendCmdOutParams">
            <summary>
            表示当执行 <b>DeviceIoControl</b> 函数后保存系统根据查询命令返回的磁盘设备信息的数据结构。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdOutParams.cBufferSize">
            <summary>
            表示所有二进制信息的缓存大小。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdOutParams.DriverStatus">
            <summary>
            表示查询到设备的错误信息状态。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.SendCmdOutParams.bBuffer">
            <summary>
            表示系统返回的设备硬件信息的二进制数据结构。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.IdSector">
            <summary>
            当执行 <b>DeviceIoControl</b> 函数后系统返回的 <b>SendCmdOutParams</b> 结构中
            保存磁盘设备的硬件信息的数据结构。
            </summary>
            <seealso cref="T:Infrastructure.Utility.Win32.SendCmdInParams"/>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wGenConfig">
            <summary>
            设备通用配置信息。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wNumCyls">
            <summary>
            设备的柱面数。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wReserved">
            <summary>
            保留内容，不使用。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wNumHeads">
            <summary>
            设备的磁头数目。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wBytesPerTrack">
            <summary>
            设备的磁道数目。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wBytesPerSector">
            <summary>
            设备的扇区数目。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wSectorsPerTrack">
            <summary>
            设备厂商设定的扇区磁道数目。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wVendorUnique">
            <summary>
            设备的出品厂商名称。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.sSerialNumber">
            <summary>
            设备出品厂商的全球唯一编码。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wBufferType">
            <summary>
            设备的缓存类型。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wBufferSize">
            <summary>
            设备缓存容量（单位是byte）。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wECCSize">
            <summary>
            设备的错误检查和纠正（ECC）数据的大小。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.sFirmwareRev">
            <summary>
            设备的固件版本。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.sModelNumber">
            <summary>
            设备的型号。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wMoreVendorUnique">
            <summary>
            设备厂商名称的扩展内容（如果有）。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wDoubleWordIO">
            <summary>
            设备双指令输入输出模式。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wCapabilities">
            <summary>
            设备的容量大小（单位Byte）。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wReserved1">
            <summary>
            第一个保留的内容，不使用。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wPIOTiming">
            <summary>
            设备的PIO模式巡道时间。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wDMATiming">
            <summary>
            设备DMA 模式巡道时间。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wBS">
            <summary>
            设备的总线类型，如SCSI,IDE等。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wNumCurrentCyls">
            <summary>
            设备的当前柱面数量。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wNumCurrentHeads">
            <summary>
            设备当前磁头数量。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wNumCurrentSectorsPerTrack">
            <summary>
            设备的当前扇区的磁道数量。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.ulCurrentSectorCapacity">
            <summary>
            设备的当前扇区容量（单位byte）。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wMultSectorStuff">
            <summary>
            多扇区读写模式支持。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.ulTotalAddressableSectors">
            <summary>
            用户是否可自定义扇区地址(LBA模式）支持。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wSingleWordDMA">
            <summary>
            单指令DMA模式。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.wMultiWordDMA">
            <summary>
            多指令DMA模式。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.IdSector.bReserved">
            <summary>
            保留内容，不使用。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.RECT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Win32.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Infrastructure.Utility.Win32.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="F:Infrastructure.Utility.Win32.RECT.left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.RECT.top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.RECT.right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Win32.RECT.bottom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Win32.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="P:Infrastructure.Utility.Win32.RECT.Size">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Win32.SCROLLINFO">
            <summary>
            
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.BarCodeToHTML">
             <summary>
            建议图片方式生成
             </summary>
        </member>
        <member name="T:Infrastructure.Utility.Collections.ComparisonHelper`1">
            <summary>
            比较辅助类，用于快速创建<see cref="T:System.Collections.Generic.IComparer`1"/>接口的实例
            </summary>
            <example>
            var comparer1 = Comparison[Person].CreateComparer(p =&gt; p.ID); var comparer2 = Comparison[Person].CreateComparer(p =&gt; p.Name); var comparer3 = Comparison[Person].CreateComparer(p =&gt; p.Birthday.Year)
            </example>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:Infrastructure.Utility.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Collections.EqualityHelper`1">
            <summary>
            相等比较辅助类，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper[Person].CreateComparer(p =&gt; p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p =&gt; p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p =&gt; p.Birthday.Year);
            </example>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:Infrastructure.Utility.Collections.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Collections.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.DataAnnotations.PasswordAttribute">
            <summary>
            确认一个密码数据类型
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.DataAnnotations.PasswordAttribute.#ctor">
            <summary>
            以最小长度为6、需要数字、不允许纯数字、需要小写字母、不需要大写字母 初始化 <see cref="T:System.ComponentModel.DataAnnotations.PasswordAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.DataAnnotations.PasswordAttribute.IsValid(System.Object)">
            <summary>
            检查数据字段的值是否有效。
            </summary>
            <returns>
            如果指定的值有效或 null，则为 true；否则，为 false。
            </returns>
            <param name="value">要验证的数据字段值。</param>
        </member>
        <member name="M:Infrastructure.Utility.DataAnnotations.PasswordAttribute.FormatErrorMessage(System.String)">
            <summary>
            基于发生错误的数据字段对错误消息应用格式设置。
            </summary>
            <returns>
            带有格式的错误消息的实例。
            </returns>
            <param name="name">要包括在带有格式的消息中的名称。</param>
        </member>
        <member name="P:Infrastructure.Utility.DataAnnotations.PasswordAttribute.RequiredLength">
            <summary>
            获取或设置 密码最小长度
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.DataAnnotations.PasswordAttribute.RequiredDigit">
            <summary>
            获取或设置 需要数字
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.DataAnnotations.PasswordAttribute.CanOnlyDigit">
            <summary>
            获取或设置 是否允许纯数字
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.DataAnnotations.PasswordAttribute.RequiredLowercase">
            <summary>
            获取或设置 需要小字字母
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.DataAnnotations.PasswordAttribute.RequiredUppercase">
            <summary>
            获取或设置 需要大小字母
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.AnyRadixConvert">
            <summary>
            任意[2,62]进制转换器
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.AnyRadixConvert.X2H(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的64位有符号整数
            </summary>
            <param name="value">指定基数的数字的字符串表示</param>
            <param name="fromRadix">字符串的基数，必须为[2,62]范围内</param>
            <returns>等效于value的数值的64位有符号整数</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.AnyRadixConvert.H2X(System.UInt64,System.Int32)">
            <summary>
            将64位有符号整数形式的数值转换为指定基数的数值的字符串形式
            </summary>
            <param name="value">64位有符号整数形式的数值</param>
            <param name="toRadix">要转换的目标基数，必须为[2,62]范围内</param>
            <returns>指定基数的数值的字符串形式</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.AnyRadixConvert.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            任意进制转换，将源进制表示的value转换为目标进制，进制的字母顺序为先大写后小写
            </summary>
            <param name="value">要转换的数据</param>
            <param name="fromRadix">源进制数，必须为[2,62]范围内</param>
            <param name="toRadix">目标进制数，必须为[2,62]范围内</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.AnyRadixConvert._10To16(System.Int32)">
            <summary>
            10进制数字转换为16进制字符串
            </summary>
            <param name="value">10进制数</param>
            <returns>16进制数的字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.AnyRadixConvert._16To10(System.String)">
            <summary>
            16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.CheckExistsType">
            <summary>
            指定可用于表数据存在性检查类型的值
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.CheckExistsType.Insert">
            <summary>
              插入数据时重复性检查
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.CheckExistsType.Update">
            <summary>
              编辑数据时重复性检查
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.CombHelper">
            <summary>
            COMB（<see cref="T:System.Guid"/>与<see cref="T:System.DateTime"/>混合构成的可排序<see cref="T:System.Guid"/>）类型操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.CombHelper.NewComb">
            <summary>
            返回Guid用于数据库操作，特定的时间代码可以提高检索效率
            </summary>
            <returns>COMB类型 Guid 数据</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.CombHelper.GetDateFromComb(System.Guid)">
            <summary>
            从SQL Server 返回的Guid中生成时间信息
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.Compression">
            <summary>
            压缩操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.Compression.Compress(System.Byte[])">
            <summary>
            对byte数组进行压缩
            </summary>
            <param name="data">待压缩的byte数组</param>
            <returns>压缩后的byte数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.Compression.Decompress(System.Byte[])">
            <summary>
            对byte[]数组进行解压
            </summary>
            <param name="data">待解压的byte数组</param>
            <returns>解压后的byte数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.Compression.Compress(System.String)">
            <summary>
            对字符串进行压缩
            </summary>
            <param name="value">待压缩的字符串</param>
            <returns>压缩后的字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.Compression.Decompress(System.String)">
            <summary>
            对字符串进行解压
            </summary>
            <param name="value">待解压的字符串</param>
            <returns>解压后的字符串</returns>
        </member>
        <member name="T:Infrastructure.Utility.Data.JsonHelper">
            <summary>
            JSON辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.JsonHelper.JsonDateTimeFormat(System.String)">
            <summary>
            处理Json的时间格式为正常格式
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.JsonHelper.ToJson(System.Object)">
            <summary>
            把对象序列化成Json字符串格式
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Data.JsonHelper.FromJson``1(System.String)">
            <summary>
            把Json字符串转换为强类型对象
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.MathHelper">
            <summary>
            数据计算辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.MathHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取两个坐标的距离
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.OperationResult">
            <summary>
            业务操作结果信息类，对操作结果进行封装
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.OperationResult`1">
            <summary>
            泛型版本的业务操作结果信息类，对操作结果进行封装
            </summary>
            <typeparam name="T">返回数据的类型</typeparam>
        </member>
        <member name="M:Infrastructure.Utility.Data.OperationResult`1.#ctor(Infrastructure.Utility.Data.OperationResultType)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.OperationResult`1.#ctor(Infrastructure.Utility.Data.OperationResultType,System.String)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.OperationResult`1.#ctor(Infrastructure.Utility.Data.OperationResultType,System.String,`0)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.OperationResult`1.ResultType">
            <summary>
            获取或设置 操作结果类型
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.OperationResult`1.Message">
            <summary>
            获取或设置 操作返回消息
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.OperationResult`1.Data">
            <summary>
            获取或设置 操作返回数据
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.OperationResult.#ctor(Infrastructure.Utility.Data.OperationResultType)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.OperationResult.#ctor(Infrastructure.Utility.Data.OperationResultType,System.String)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.OperationResult.#ctor(Infrastructure.Utility.Data.OperationResultType,System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.OperationResultType">
            <summary>
            表示业务操作结果的枚举
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.OperationResultType.ValidError">
            <summary>
              输入信息验证失败
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.OperationResultType.QueryNull">
            <summary>
              指定参数的数据不存在
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.OperationResultType.NoChanged">
            <summary>
              操作取消或操作没引发任何变化
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.OperationResultType.Success">
            <summary>
              操作成功
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Data.OperationResultType.Error">
            <summary>
              操作引发错误
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.PageCondition">
            <summary>
            分页查询条件信息
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.PageCondition.#ctor">
            <summary>
            初始化一个 默认参数（第1页，每页20，排序条件为空）的分页查询条件信息类 的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.PageCondition.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个 指定页索引与页大小的分页查询条件信息类 的新实例
            </summary>
            <param name="pageIndex"> 页索引 </param>
            <param name="pageSize"> 页大小 </param>
        </member>
        <member name="P:Infrastructure.Utility.Data.PageCondition.PageIndex">
            <summary>
            获取或设置 页索引
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.PageCondition.PageSize">
            <summary>
            获取或设置 页大小
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.PageCondition.RowCount">
            <summary>
            总数量
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.PageCondition.SortConditions">
            <summary>
            获取或设置 排序条件组
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.SerializeHelper">
            <summary>
            序列化辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.Save(System.Object,System.String)">
            <summary>
            文件化XML序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.Load``1(System.String)">
            <summary>
            文件化XML反序列化
            </summary>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.Load(System.Type,System.String)">
            <summary>
            文件化XML反序列化
            </summary>
            <param name="type"></param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.LoadFromStr``1(System.String)">
            <summary>
            文件化XML反序列化
            </summary>
            <param name="strXml">xml内容</param>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.ToBinary(System.Object)">
            <summary>
            将数据序列化为二进制数组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.FromBinary``1(System.Byte[])">
            <summary>
            将二进制数组反序列化为强类型数据
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.ToBinaryFile(System.Object,System.String)">
            <summary>
            将数据序列化为二进制数组并写入文件中
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.FromBinaryFile``1(System.String)">
            <summary>
            将指定二进制数据文件还原为强类型数据
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.ToXml(System.Object)">
            <summary>
            将数据序列化为XML形式
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.FromXml``1(System.String)">
            <summary>
            将XML数据反序列化为强类型
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.ToXmlFile(System.Object,System.String)">
            <summary>
            将数据序列化为XML并写入文件
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SerializeHelper.FromXmlFile``1(System.String)">
            <summary>
            将指定XML数据文件还原为强类型数据
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.Singleton`1">
            <summary>
            定义一个指定类型的单例，该实例的生命周期将跟随整个应用程序。
            </summary>
            <typeparam name="T">要创建单例的类型。</typeparam>
        </member>
        <member name="T:Infrastructure.Utility.Data.Singleton">
            <summary>
            提供一个字典容器，按类型装载所有<see cref="T:Infrastructure.Utility.Data.Singleton`1"/>的单例实例
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.Singleton.AllSingletons">
            <summary>
            获取 单例对象字典
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.Singleton`1.Instance">
            <summary>
            获取指定类型的单例实例
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.SingletonDictionary`2">
            <summary>
            创建一个单例字典，该实例的生命周期将跟随整个应用程序
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
        </member>
        <member name="P:Infrastructure.Utility.Data.SingletonDictionary`2.Instance">
            <summary>
            获取指定类型的字典的单例实例
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.SingletonList`1">
            <summary>
            创建一个类型列表的单例，该实例的生命周期将跟随整个应用程序
            </summary>
            <typeparam name="T">要创建的列表元素的类型</typeparam>
        </member>
        <member name="P:Infrastructure.Utility.Data.SingletonList`1.Instance">
            <summary>
            获取指定类型的列表的单例实例
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.SortCondition">
            <summary>
            列表字段排序条件
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SortCondition.#ctor(System.String)">
            <summary>
            构造一个指定字段名称的升序排序的排序条件
            </summary>
            <param name="sortField">字段名称</param>
        </member>
        <member name="M:Infrastructure.Utility.Data.SortCondition.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            构造一个排序字段名称和排序方式的排序条件
            </summary>
            <param name="sortField">字段名称</param>
            <param name="listSortDirection">排序方式</param>
        </member>
        <member name="P:Infrastructure.Utility.Data.SortCondition.SortField">
            <summary>
            获取或设置 排序字段名称
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Data.SortCondition.ListSortDirection">
            <summary>
            获取或设置 排序方向
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Data.SortCondition`1">
            <summary>
            支持泛型的列表字段排序条件
            </summary>
            <typeparam name="T">列表元素类型</typeparam>
        </member>
        <member name="M:Infrastructure.Utility.Data.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            使用排序字段 初始化一个<see cref="T:Infrastructure.Utility.Data.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.ComponentModel.ListSortDirection)">
            <summary>
            使用排序字段与排序方式 初始化一个<see cref="T:Infrastructure.Utility.Data.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Data.SortCondition`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            从泛型委托获取属性名
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.CNDate">
            <summary>
            农历属性
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnIntYear">
            <summary>
            农历年(整型)
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnIntMonth">
            <summary>
            农历月份(整型)
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnIntDay">
            <summary>
            农历天(整型)
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnStrYear">
            <summary>
            农历年(支干)
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnStrMonth">
            <summary>
            农历月份(字符)
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnStrDay">
            <summary>
            农历天(字符)
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnAnm">
            <summary>
            农历属象
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnSolarTerm">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnFtvl">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.CNDate.cnFtvs">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.ChinaDate">
            <summary>
            公历转农历
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.lYearDays(System.Int32)">
            <summary>
            传回农历y年的总天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.leapDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.leapMonth(System.Int32)">
            <summary>
            传回农历y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.monthDays(System.Int32,System.Int32)">
            <summary>
            传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.AnimalsYear(System.Int32)">
            <summary>
            传回农历y年的生肖
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.cyclicalm(System.Int32)">
            <summary>
            传入月日的offset 传回干支,0=甲子
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.cyclical(System.Int32)">
            <summary>
            传入offset 传回干支, 0=甲子
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.Lunar(System.Int32,System.Int32)">
            <summary>
            传出农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            传回公历y年m月的总天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.GetMondayDateByDate(System.DateTime)">
            <summary>
            根据日期值获得周一的日期
            </summary>
            <param name="dt">输入日期</param>
            <returns>周一的日期</returns>
        </member>
        <member name="M:Infrastructure.Utility.ChinaDate.getChinaDate(System.DateTime)">
            <summary>
            获取农历
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.ChineseCalendar">
            <summary>
            中国日历
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="LeapFlag">闰月标志</param>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary> 
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.newCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.ChineseCalendar.SolarHolidayStruct">
            <summary>
            阳历
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.ChineseCalendar.LunarHolidayStruct">
            <summary>
            农历
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Develop.CodeRamer">
            <summary>
            代码性能测试内存计算工具
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Develop.CodeRamer.Initialize">
            <summary>
            内存计算初始化，同时后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Develop.CodeRamer.Ram(System.String,System.Action)">
            <summary>
            内存计算，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name"> 操作标识名 </param>
            <param name="action"> 操作过程的Action </param>
        </member>
        <member name="T:Infrastructure.Utility.Develop.CodeTimer">
            <summary>
            代码性能测试计时器（来自博客园-老赵）
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Develop.CodeTimer.GetCycleCount">
            <summary>
            获取当前CPU循环次数
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Infrastructure.Utility.Develop.CodeTimer.Initialize">
            <summary>
            计时器初始化 对计时器进行初始化操作，同时对后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Develop.CodeTimer.Time(System.String,System.Int32,System.Action)">
            <summary>
            计时器，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name"> 操作标识名 </param>
            <param name="iteration"> 重复次数 </param>
            <param name="action"> 操作过程的Action </param>
        </member>
        <member name="T:Infrastructure.Utility.Develop.T4.T4ModelInfo">
            <summary>
            T4实体模型信息类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Develop.T4.T4ModelInfo.#ctor(System.Type,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Develop.T4.T4ModelInfo"/>类型的新实例
            </summary>
            <param name="modelType">实体类型</param>
            <param name="useModuleDir">是否使用模块文件夹</param>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.KeyType">
            <summary>
            获取或设置 主键类型
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.UseModuleDir">
            <summary>
            获取 是否使用模块文件夹
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.ModuleName">
            <summary>
            获取 模型所在模块名称
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.Namespace">
            <summary>
            获取 模型命名空间
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.Name">
            <summary>
            获取 模型名称
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.Description">
            <summary>
            获取 模型描述
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.Properties">
            <summary>
            属性信息集合
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Develop.T4.T4ModelInfo.ProjectName">
            <summary>
            获取或设置 工程名称，生成代码的命名空间都基于此名称
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Disposable">
            <summary>
            用于实现<see cref="T:System.IDisposable"/>接口，表示当前类型是可释放的
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Disposable.Finalize">
            <summary>
            释放当前对象时释放资源
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Disposable.Dispose">
            <summary>
            释放对象，用于外部调用
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Disposable.Dispose(System.Boolean)">
            <summary>
            重写以实现释放对象的逻辑
            </summary>
            <param name="disposing">是否要释放对象</param>
        </member>
        <member name="M:NetUtilityLib.ImageHelper.ImageToBytes(System.Drawing.Image)">
            <summary>
            Convert Image to Byte[]
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:NetUtilityLib.ImageHelper.BytesToImage(System.Byte[])">
            <summary>
            Convert Byte[] to Image
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:NetUtilityLib.ImageHelper.CreateImageFromBytes(System.String,System.Byte[])">
            <summary>
            Convert Byte[] to a picture and Store it in file
            </summary>
            <param name="fileName"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Drawing.ValidateCoder">
            <summary>
            验证码生成类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Drawing.ValidateCoder.#ctor">
            <summary>
            初始化<see cref="T:Infrastructure.Utility.Drawing.ValidateCoder"/>类的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Drawing.ValidateCoder.GetCode(System.Int32,Infrastructure.Utility.Drawing.ValidateCodeType)">
            <summary>
            获取指定长度的验证码字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Drawing.ValidateCoder.CreateImage(System.String,Infrastructure.Utility.Drawing.ValidateCodeType)">
            <summary>
            获取指定字符串的验证码图片
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Drawing.ValidateCoder.CreateImage(System.Int32,System.String@,Infrastructure.Utility.Drawing.ValidateCodeType)">
            <summary>
            获取指定长度的验证码图片
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Drawing.ValidateCoder.GetRandomHanzis(System.Int32)">
            <summary>
            获取汉字验证码
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.FontNames">
            <summary>
            获取或设置 字体名称集合
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.FontNamesForHanzi">
            <summary>
            获取或设置 汉字字体名称集合
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.FontSize">
            <summary>
            获取或设置 字体大小
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.FontWidth">
            <summary>
            获取或设置 字体宽度
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.Height">
            <summary>
            获取或设置 图片高度
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.BgColor">
            <summary>
            获取或设置 背景颜色
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.HasBorder">
            <summary>
            获取或设置 是否有边框
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.RandomPosition">
            <summary>
            获取或设置 是否随机位置
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.RandomColor">
            <summary>
            获取或设置 是否随机字体颜色
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.RandomItalic">
            <summary>
            获取或设置 是否随机倾斜字体
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.RandomPointPercent">
            <summary>
            获取或设置 随机干扰点百分比（百分数形式）
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Drawing.ValidateCoder.RandomLineCount">
            <summary>
            获取或设置 随机干扰线数量
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Drawing.ValidateCodeType">
            <summary>
            验证码类型
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Drawing.ValidateCodeType.Number">
            <summary>
            纯数值
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Drawing.ValidateCodeType.NumberAndLetter">
            <summary>
            数值与字母的组合
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Drawing.ValidateCodeType.Hanzi">
            <summary>
            汉字
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Rand">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Rand.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:Infrastructure.Utility.Rand.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Infrastructure.Utility.Rand.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Infrastructure.Utility.Rand.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Infrastructure.Utility.Rand.Str_char(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Infrastructure.Utility.Rand.Str_char(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="T:Infrastructure.Utility.YZMHelper">
            <summary>
            验证图片类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.YZMHelper.Next(System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="max">最大值</param>
        </member>
        <member name="M:Infrastructure.Utility.YZMHelper.Next(System.Int32,System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Infrastructure.Utility.YZMHelper.CreateImage">
            <summary>
            绘制验证码
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.YZMHelper.GetRandomColor">
            <summary>
            字体随机颜色
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.YZMHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高,一般为3</param>
            <param name="dPhase">波形的起始相位,取值区间[0-2*PI)</param>
        </member>
        <member name="P:Infrastructure.Utility.YZMHelper.Text">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.YZMHelper.Image">
            <summary>
            验证码图片
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Dynamic.Exposed">
            <summary>
            Exposes hidden (private/protected/internal) members of an
            <see langword="object"/> or <see cref="T:System.Type"/> through a <see langword="dynamic"/> wrapper.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Dynamic.Exposed.value">
            <summary>
            The <see langword="object"/> that is being exposed.
            <see langword="null"/> if static members of a <see cref="T:System.Type"/> are being exposed.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.Exposed.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Infrastructure.Utility.Dynamic.Exposed"/> class. 
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.Exposed.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Infrastructure.Utility.Dynamic.Exposed"/> class. 
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.Exposed.From(System.Object)">
            <summary>
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.Exposed.From(System.Type)">
            <summary>
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.Exposed.New(System.Type)">
            <summary>
            Creates a new wrapper for accessing members of a new instance of <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of which an instance will have it's members exposed.
            </param>
            <returns>
            A new wrapper around a new instance of <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.Exposed.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">
            The expression tree representation of the runtime value.
            </param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="P:Infrastructure.Utility.Dynamic.Exposed.SubjectType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the exposed object.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.EnumerableUtils.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历当前对象，并且调用方法进行处理
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="instance">实例</param>
            <param name="action">方法</param>
            <returns>当前集合</returns>
        </member>
        <member name="M:Infrastructure.Utility.EnumerableUtils.Each``1(System.Int32,System.Action{System.Int32})">
            <summary>
            遍历N次
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.EnumerableUtils.Join(System.Collections.IEnumerable)">
            <summary>
            以“,”拼接字符串
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.EnumerableUtils.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            使用分隔符拼接字符串
            </summary>
            <param name="items"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.EnumerableUtils.Join(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            使用分隔符、以及模板字符串拼接字符串
            </summary>
            <param name="items">待拼接集合</param>
            <param name="separator">分隔符</param>
            <param name="template">字符串格式化模板</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Exceptions.InnocellenceException">
            <summary>
            Innocellence框架异常类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Exceptions.InnocellenceException.#ctor">
            <summary>
            初始化<see cref="T:Infrastructure.Utility.Exceptions.InnocellenceException"/>类的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Exceptions.InnocellenceException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化<see cref="T:Infrastructure.Utility.Exceptions.InnocellenceException"/>类的新实例。
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Infrastructure.Utility.Exceptions.InnocellenceException.#ctor(System.String,System.Exception)">
            <summary>
            使用异常消息与一个内部异常实例化一个<see cref="T:Infrastructure.Utility.Exceptions.InnocellenceException"/>类的新实例
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">用于封装在<see cref="T:Infrastructure.Utility.Exceptions.InnocellenceException"/>内部的异常实例</param>
        </member>
        <member name="M:Infrastructure.Utility.Exceptions.InnocellenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用可序列化数据实例化一个<see cref="T:Infrastructure.Utility.Exceptions.InnocellenceException"/>类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="T:Infrastructure.Utility.IO.CsvSerializer`1">
            <summary>
            Serialize and Deserialize Lists of any object type to CSV.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.IO.CsvSerializer`1.#ctor">
            <summary>
            Csv Serializer
            Initialize by selected properties from the type to be de/serialized
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.IO.CsvSerializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize
            </summary>
            <param name="stream">stream</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.IO.CsvSerializer`1.SerializeStream(System.Collections.Generic.IList{`0},System.String[])">
            <summary>
            Serialize
            </summary>
            <param name="stream">stream</param>
            <param name="data">data</param>
        </member>
        <member name="M:Infrastructure.Utility.IO.CsvSerializer`1.GetHeader(System.String[])">
            <summary>
            Get Header
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.IO.InvalidCsvFormatException.#ctor(System.String)">
            <summary>
            Invalid Csv Format Exception
            </summary>
            <param name="message">message</param>
        </member>
        <member name="T:Infrastructure.Utility.PinYinConverter">
            <summary>
            汉字拼音转换类
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.PinYinConverter.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.PinYinConverter.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.PinYinConverter.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>               
            <param name="ch"></param>               
            <returns></returns>               
        </member>
        <member name="M:Infrastructure.Utility.PinYinConverter.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.PinYinConverter.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.PinYinConverter.Get(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.PinYin.GetCodstring(System.String)">
            <summary>
            取汉字拼音的首字母
            </summary>
            <param name="UnName">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="T:Infrastructure.Utility.Reflection.FastInvokeHandler">
            <summary>
            快速执行处理器
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Reflection.FastInvokeHandler.Create(System.Reflection.MethodInfo)">
            <summary>
            创建方法的快速处理封装
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Dynamic.MetaObject">
            <summary>
            Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Dynamic.MetaObject.isStatic">
            <summary>
            Should this <see cref="T:Infrastructure.Utility.Dynamic.MetaObject"/> bind to <see langword="static"/> or instance methods and fields.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.#ctor(System.Linq.Expressions.Expression,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infrastructure.Utility.Dynamic.MetaObject"/> class.
            </summary>
            <param name="expression">
            The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"/> during the dynamic binding process.
            </param>
            <param name="value">
            The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject"/>.
            </param>
            <param name="staticBind">
            Should this MetaObject bind to <see langword="static"/> or instance methods and fields.
            </param>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="args">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances - arguments to the invoke member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
            <exception cref="T:System.MissingMemberException">
            There is an attempt to dynamically access a class member that does not exist.
            </exception>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Performs the binding of the dynamic get member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.GetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.SetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="value">
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the value for the set member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.GetMemberExpression(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Generates the <see cref="T:System.Linq.Expressions.Expression"/> for accessing a member by name.
            </summary>
            <param name="self">
            The <see cref="T:System.Linq.Expressions.Expression"/> for accessing the <see cref="T:Infrastructure.Utility.Dynamic.Exposed"/> instance.
            </param>
            <param name="memberName">
            The member name.
            </param>
            <returns>
            <see cref="T:System.Linq.Expressions.MemberExpression"/> for accessing a member by name.
            </returns>
            <exception cref="T:System.MissingMemberException">
            </exception>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.ConvertExpressionType(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Coerces the expression type into the expected return type.
            </summary>
            <param name="expectedType">Type expeted at the dispatch site.</param>
            <param name="target">Expression to coerce.</param>
            <remarks>Dynamic dispatch expects a <see langword="void"/> method to return <see langword="null"/>.</remarks>
            <returns>Target expression coerced to the required type.</returns>
        </member>
        <member name="M:Infrastructure.Utility.Dynamic.MetaObject.GetBindingFlags">
            <summary>
            Returns <see cref="T:System.Reflection.BindingFlags"/> for member search.
            </summary>
            <returns>
            Static or instance flags depending on <see cref="F:Infrastructure.Utility.Dynamic.MetaObject.isStatic"/>.
            </returns>
        </member>
        <member name="T:Infrastructure.Utility.Exceptions.ExceptionMessage">
            <summary>
            异常信息封装类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Exceptions.ExceptionMessage.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            以自定义用户信息和异常对象实例化一个异常信息对象
            </summary>
            <param name="e">异常对象</param>
            <param name="userMessage">自定义用户信息</param>
            <param name="isHideStackTrace">是否隐藏异常堆栈信息</param>
        </member>
        <member name="M:Infrastructure.Utility.Exceptions.ExceptionMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Infrastructure.Utility.Exceptions.ExceptionMessage.UserMessage">
            <summary>
            用户信息，用于报告给用户的异常消息
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Exceptions.ExceptionMessage.ExMessage">
            <summary>
            直接的Exception异常信息，即e.Message属性值
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Exceptions.ExceptionMessage.ErrorDetails">
            <summary>
            异常输出的详细描述，包含异常消息，规模信息，异常类型，异常源，引发异常的方法及内部异常信息
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.AssemblyExtensions">
            <summary>
            程序集扩展操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.BooleanExtensions">
            <summary>
            布尔值<see cref="T:System.Boolean"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            把布尔值转换为小写字符串
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.CollectionExtensions">
            <summary>
            集合扩展方法类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <param name="separator"> 分隔符，默认为逗号 </param>
            <returns> 拼接后的字符串 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            循环集合的每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <param name="collection">待处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separetor">分隔符，默认为逗号</param>
            <typeparam name="T">泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合是否为空
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 为空返回True，不为空返回False </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="source">要操作的源</param>
            <param name="keySelector">重复数据筛选条件</param>
            <returns>不重复元素的集合</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Infrastructure.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Infrastructure.Utility.Data.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},Infrastructure.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedEnumerable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <typeparam name="T">动态类型</typeparam>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},Infrastructure.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},Infrastructure.Utility.Data.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},Infrastructure.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.EnumExtensions">
            <summary>
            枚举<see cref="T:System.Enum"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            获取枚举项上�?see cref="DescriptionAttribute"/>特性的文字描述
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.ExceptionExtensions">
            <summary>
            异常操作扩展
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ExceptionExtensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
            <returns>格式化后的异常信息字符串</returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.ExpressionExtensions">
            <summary>
            Expression表达式扩展操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.LinqToXmlExtensions">
            <summary>
            Xml 扩展操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.LinqToXmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            将XmlNode转换为XElement
            </summary>
            <returns> XElment对象 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.LinqToXmlExtensions.ToXmlNode(System.Xml.Linq.XElement)">
            <summary>
            将XElement转换为XmlNode
            </summary>
            <returns> 转换后的XmlNode </returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.MemoryCacheExtensions">
            <summary>
            内存缓存扩展操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.MemoryCacheExtensions.Get``1(System.Runtime.Caching.MemoryCache,System.String,System.String)">
            <summary>
            获取指定键值的强类型数据
            </summary>
            <typeparam name="T">强类型</typeparam>
            <param name="cache"></param>
            <param name="key">缓存键值</param>
            <param name="regionName">区域名称，默认不支持</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.ObjectExtensions">
            <summary>
            基类型<see cref="T:System.Object"/>扩展辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)">
            <summary>
            把对象类型转换为指定类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ObjectExtensions.CastTo``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)">
            <summary>
            把对象类型转化为指定类型，转化失败时返回指定的默认值
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <param name="defaultValue"> 转化失败返回的指定默认值 </param>
            <returns> 转化后的指定类型对象，转化失败时返回指定的默认值 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ObjectExtensions.IsBetween``1(System.IComparable{``0},``0,``0,System.Boolean,System.Boolean)">
            <summary>
            判断当前值是否介于指定范围内
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 动态类型对象 </param>
            <param name="start"> 范围起点 </param>
            <param name="end"> 范围终点 </param>
            <param name="leftEqual"> 是否可等于上限（默认等于） </param>
            <param name="rightEqual"> 是否可等于下限（默认等于） </param>
            <returns> 是否介于 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ObjectExtensions.ToJsonString``1(``0)">
            <summary>
            将对象序列化为JSON字符串，不支持存在循环引用的对象
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="value">动态类型对象</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.ParamterCheckExtensions">
            <summary>
            用于参数检查的扩展方法
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言。</param>
            <param name="message">异常消息。</param>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <param name="value"></param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<typeparam name="TException>"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <typeparam name="TException">抛出的异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型。</typeparam>
            <param name="collection"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="start">比较范围的起始值。</param>
            <param name="end">比较范围的结束值。</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常。
            </summary>
            <param name="directory"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.ParamterCheckExtensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="filename"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">当文件路径为null时</exception>
            <exception cref="T:System.IO.FileNotFoundException">当文件路径不存在时</exception>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.RandomExtensions">
            <summary>
            随机数<see cref="T:System.Random"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            返回随机布尔值
            </summary>
            <param name="random"></param>
            <returns>随机布尔值</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            返回指定枚举类型的随机枚举值
            </summary>
            <param name="random"></param>
            <returns>指定枚举类型的随机枚举值</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            返回随机数填充的指定长度的数组
            </summary>
            <param name="random"></param>
            <param name="length">数组长度</param>
            <returns>随机数填充的指定长度的数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.NextItem``1(System.Random,``0[])">
            <summary>
            返回数组中的随机元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="random"></param>
            <param name="items">元素数组</param>
            <returns>元素数组中的某个随机项</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            返回指定时间段内的随机时间值
            </summary>
            <param name="random"></param>
            <param name="minValue">时间范围的最小值</param>
            <param name="maxValue">时间范围的最大值</param>
            <returns>指定时间段内的随机时间值</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            返回随机时间值
            </summary>
            <param name="random"></param>
            <returns>随机时间值</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.GetRandomNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机数字字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机数字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.GetRandomLetterString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母组成字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.RandomExtensions.GetRandomLetterAndNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母和数字字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母和数字组成字符串</returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.StringBuilderExtensions">
            <summary>
            StringBuilder 扩展方法类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定<seealso cref="T:System.Char"/>
            </summary>
            <param name="sb"></param>
            <param name="c">要去掉的<seealso cref="T:System.Char"/></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定字符数组
            </summary>
            <param name="sb"></param>
            <param name="cs">要去掉的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头的指定的<seealso cref="T:System.String"/>
            </summary>
            <param name="sb"></param>
            <param name="str">要去掉的<seealso cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder结尾的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符
            </summary>
            <param name="sb"></param>
            <param name="c">要去掉的字符</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符数组
            </summary>
            <param name="sb"></param>
            <param name="chars">要去除的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符串
            </summary>
            <param name="sb"></param>
            <param name="str">要去除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder两端的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringBuilderExtensions.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回<see cref="T:System.Text.StringBuilder"/>从起始位置指定长度的字符串
            </summary>
            <param name="sb"></param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns>字符串</returns>
            <exception cref="T:System.OverflowException">超出字符串索引长度异常</exception>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.StringExtensions">
            <summary>
            字符串<see cref="T:System.String"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.Matches(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value"> 要搜索匹配项的字符串 </param>
            <param name="pattern"> 要匹配的正则表达式模式 </param>
            <returns> 一个集合，包含有关匹配项的字符串值 </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsIpAddress(System.String)">
            <summary>
            是否是IP地址
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否是整数
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsUnicode(System.String)">
            <summary>
            是否是Unicode字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsUrl(System.String)">
            <summary>
            是否Url字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsIdentityCard(System.String)">
            <summary>
            是否身份证号，验证如下3种情况：
            1.身份证号码为15位数字；
            2.身份证号码为18位数字；
            3.身份证号码为17位数字+1个字母
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsMobileNumber(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value"></param>
            <param name="isRestrict">是否按严格格式验证</param>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            指示指定的字符串是 null 还是 System.String.Empty 字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            为指定格式的字符串填充相应对象来生成字符串
            </summary>
            <param name="format">字符串格式，占位符以{n}表示</param>
            <param name="args">用于填充占位符的参数</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.ReverseString(System.String)">
            <summary>
            将字符串反转
            </summary>
            <param name="value">要反转的字符串</param>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.IsImageFile(System.String)">
            <summary>
            判断指定路径是否图片文件
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.ToMd5Hash(System.String)">
            <summary>
            获取字符串的MD5 Hash值
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.TextLength(System.String)">
            <summary>
            支持汉字的字符串长度，汉字长度计为2
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，汉字长度为2</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.FromJsonString``1(System.String)">
            <summary>
            将JSON字符串还原为对象
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="json">JSON字符串 </param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为<see cref="T:System.Byte"/>[]数组，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.StringExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.ThreadExtensions">
            <summary>
            线程扩展操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ThreadExtensions.CancelSleep(System.Threading.Thread)">
            <summary>
            取消Thread.Sleep状态，继续线程
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})">
            <summary>
            启动线程，自动忽略停止线程时触发的<see cref="T:System.Threading.ThreadAbortException"/>异常
            </summary>
            <param name="thread">线程</param>
            <param name="failAction">引发非<see cref="T:System.Threading.ThreadAbortException"/>异常时执行的逻辑</param>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.TryCatchExtensions">
            <summary>
            Try-Catch扩展操作
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能与后续功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="T:Infrastructure.Utility.Extensions.TypeExtensions">
            <summary>
            类型<see cref="T:System.Type"/>辅助扩展方法类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.ExistsAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">要检查的Attribute特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:Infrastructure.Utility.Extensions.TypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Filter.FilterGroup">
            <summary>
            筛选条件组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterGroup.#ctor">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterGroup"/>的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterGroup.#ctor(Infrastructure.Utility.Filter.FilterOperate)">
            <summary>
            使用操作方式初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterGroup"/>的新实例
            </summary>
            <param name="operate">条件间操作方式</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterGroup.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterGroup"/>类型的新实例
            </summary>
            <param name="operateCode">条件间操作方式的前台码</param>
        </member>
        <member name="P:Infrastructure.Utility.Filter.FilterGroup.Rules">
            <summary>
            获取或设置 条件集合
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Filter.FilterGroup.Groups">
            <summary>
            获取或设置 条件组集合
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Filter.FilterGroup.Operate">
            <summary>
            获取或设置 条件间操作方式，仅限And, Or
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Filter.FilterHelper">
            <summary>
            查询表达式辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterHelper.GetExpression``1(Infrastructure.Utility.Filter.FilterGroup)">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="group">查询条件组，如果为null，则直接返回 true 表达式</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterHelper.GetExpression``1(Infrastructure.Utility.Filter.FilterRule)">
            <summary>
            获取指定查询条件的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="rule">查询条件，如果为null，则直接返回 true 表达式</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterHelper.ToOperateCode(Infrastructure.Utility.Filter.FilterOperate)">
            <summary>
            把查询操作的枚举表示转换为操作码
            </summary>
            <param name="operate">查询操作的枚举表示</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterHelper.GetFilterOperate(System.String)">
            <summary>
            获取操作码的查询操作枚举表示
            </summary>
            <param name="code">操作码</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Filter.FilterOperate">
            <summary>
            筛选操作方式
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.LessOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.GreaterOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.StartsWith">
            <summary>
            以……开始
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.EndsWith">
            <summary>
            以……结束
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Filter.FilterOperate.Contains">
            <summary>
            包含（相似）
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Filter.FilterRule">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterRule.#ctor">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterRule"/>的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterRule.#ctor(System.String,System.Object)">
            <summary>
            使用指定数据名称，数据值初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterRule"/>的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterRule.#ctor(System.String,System.Object,Infrastructure.Utility.Filter.FilterOperate)">
            <summary>
            使用指定数据名称，数据值及操作方式初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterRule"/>的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
            <param name="operate">操作方式</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.FilterRule.#ctor(System.String,System.Object,System.String)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Filter.FilterRule"/>类型的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
            <param name="operateCode">操作方式的前台码</param>
        </member>
        <member name="P:Infrastructure.Utility.Filter.FilterRule.Field">
            <summary>
            获取或设置 属性名称
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Filter.FilterRule.Value">
            <summary>
            获取或设置 属性值
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Filter.FilterRule.Operate">
            <summary>
            获取或设置 操作类型
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Filter.OperateCodeAttribute">
            <summary>
            表示查询操作的前台操作码
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Filter.OperateCodeAttribute.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Filter.OperateCodeAttribute"/>类型的新实例
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Filter.OperateCodeAttribute.Code">
            <summary>
            获取 属性名称
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Filter.CollectionPropertySorter`1">
            <summary>
            集合类型字符串排序操作类
            </summary>
            <typeparam name="T">集合项类型</typeparam>
        </member>
        <member name="M:Infrastructure.Utility.Filter.CollectionPropertySorter`1.OrderBy(System.Collections.Generic.IEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Collections.Generic.IEnumerable`1"/>序列进行排序
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedEnumerable`1"/>进行继续排序
            </summary>
            <param name="source"><see cref="T:System.Linq.IOrderedEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:Infrastructure.Utility.Filter.CollectionPropertySorter`1.OrderBy(System.Linq.IQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IOrderedQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.IO.DirectoryHelper">
            <summary>
            目录操作辅助类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])">
            <summary>
            递归复制文件夹及文件夹/文件
            </summary>
            <param name="sourcePath"> 源文件夹路径 </param>
            <param name="targetPath"> 目的文件夹路径 </param>
            <param name="searchPatterns"> 要复制的文件扩展名数组 </param>
        </member>
        <member name="M:Infrastructure.Utility.IO.DirectoryHelper.Delete(System.String,System.Boolean)">
            <summary>
            递归删除目录
            </summary>
            <param name="directory"> 目录路径 </param>
            <param name="isDeleteRoot"> 是否删除根目录 </param>
            <returns> 是否成功 </returns>
        </member>
        <member name="M:Infrastructure.Utility.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置或取消目录的<see cref="T:System.IO.FileAttributes"/>属性。
            </summary>
            <param name="directory">目录路径</param>
            <param name="attribute">要设置的目录属性</param>
            <param name="isSet">true为设置，false为取消</param>
        </member>
        <member name="T:Infrastructure.Utility.IO.FileHelper">
            <summary>
            文件辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.IO.FileHelper.Delete(System.String,System.Boolean)">
            <summary>
            删除文件（到回收站[可选]）
            </summary>
            <param name="filename">要删除的文件名</param>
            <param name="isSendToRecycleBin">是否删除到回收站</param>
        </member>
        <member name="M:Infrastructure.Utility.IO.FileHelper.SetAttribute(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置或取消文件的指定<see cref="T:System.IO.FileAttributes"/>属性
            </summary>
            <param name="fileName">文件名</param>
            <param name="attribute">要设置的文件属性</param>
            <param name="isSet">true为设置，false为取消</param>
        </member>
        <member name="M:Infrastructure.Utility.IO.FileHelper.GetVersion(System.String)">
            <summary>
            获取文件版本号
            </summary>
            <param name="fileName"> 完整文件名 </param>
            <returns> 文件版本号 </returns>
        </member>
        <member name="M:Infrastructure.Utility.IO.FileHelper.GetFileMd5(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="fileName"> 文件名 </param>
            <returns> 32位MD5 </returns>
        </member>
        <member name="T:Infrastructure.Utility.Net.IpLocation">
            <summary>
            IP位置信息类
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Net.IpLocation.Ip">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Net.IpLocation.Country">
            <summary>
            IP地址所属国家
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Net.IpLocation.Local">
            <summary>
            位置信息
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Net.IpLocator">
            <summary>
            IP位置查找操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Net.IpLocator.#ctor(System.String)">
            <summary>
            初始化一个IP位置查找操作类的实例
            </summary>
            <param name="dataPath"> IP信息数据文件路径 </param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.Net.IpLocator.Query(System.String)">
            <summary>
            由IP地址查找对应的位置信息
            </summary>
            <param name="ip"> 要查找的IP地址 </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Infrastructure.Utility.Net.IpLocator.Query2(System.String)">
            <summary>
            由IP地址查找对应的位置信息的字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Net.IpLocator.GetCountry(System.Int64,System.Int32,System.String@)">
            <summary>
            Gets the country.
            </summary>
            <param name="endIpOff"> The end ip off. </param>
            <param name="countryFlag"> The country flag. </param>
            <param name="local"> The local. </param>
            <returns> country </returns>
        </member>
        <member name="P:Infrastructure.Utility.Net.IpLocator.Count">
            <summary>
            数据文件中信息数量
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Filter_GroupOperateError">
            <summary>
              查找类似 查询条件组中的操作类型错误，只能为And或者Or。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Filter_RuleFieldInTypeNotFound">
            <summary>
              查找类似 指定的属性“{0}”在类型“{1}”中不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Logging_CreateLogInstanceReturnNull">
            <summary>
              查找类似 创建名称为“{0}”的日志实例时“{1}”返回空实例。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Mef_HttpContextItems_NotFoundRequestContainer">
            <summary>
              查找类似 当前Http上下文中不存在Request有效范围的Mef部件容器。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ObjectExtensions_PropertyNameNotExistsInType">
            <summary>
              查找类似 指定对象中不存在名称为“{0}”的属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ObjectExtensions_PropertyNameNotFixedType">
            <summary>
              查找类似 指定名称“{0}”的属性类型不是“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_Between">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_BetweenNotEqual">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_DirectoryNotExists">
            <summary>
              查找类似 指定的目录路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_FileNotExists">
            <summary>
              查找类似 指定的文件路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotEmpty_Guid">
            <summary>
              查找类似 参数“{0}”的值不能为Guid.Empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotGreaterThan">
            <summary>
              查找类似 参数“{0}”的值必须大于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须大于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotLessThan">
            <summary>
              查找类似 参数“{0}”的值必须小于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotLessThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须小于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotNull">
            <summary>
              查找类似 参数“{0}”不能为空引用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              查找类似 参数“{0}”不能为空引用或空集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              查找类似 参数“{0}”不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Security_DES_KeyLenght">
            <summary>
              查找类似 参数key的长度必须为8或24，当前为{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Properties.Resources.Security_RSA_Sign_HashType">
            <summary>
              查找类似 参数hashType必须为MD5或SHA1 的本地化字符串。
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Reflection.IMemberAccessor">
            <summary>
            Abstraction of the function of accessing member of a object at runtime.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Reflection.IMemberAccessor.GetValue(System.Object,System.String)">
            <summary>
            Get the member value of an object.
            </summary>
            <param name="instance">The object to get the member value from.</param>
            <param name="memberName">The member name, could be the name of a property of field. Must be public member.</param>
            <returns>The member value</returns>
        </member>
        <member name="M:Infrastructure.Utility.Reflection.IMemberAccessor.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Set the member value of an object.
            </summary>
            <param name="instance">The object to get the member value from.</param>
            <param name="memberName">The member name, could be the name of a property of field. Must be public member.</param>
            <param name="newValue">The new value of the property for the object instance.</param>
        </member>
        <member name="T:Infrastructure.Utility.Reflection.MemberFactory`1">
            <summary>
            该实体类主要是通过反射机制来获取泛型实体类的实例的
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Secutiry.CommunicationCryptor">
            <summary>
            结合RSA，DES的通信加密解密操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.CommunicationCryptor.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Secutiry.CommunicationCryptor"/>类型的新实例
            </summary>
            <param name="ownPrivateKey">己方私钥</param>
            <param name="facePublicKey">对方公钥</param>
            <param name="hashType">摘要哈希方式，值必须为MD5或SHA1</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.CommunicationCryptor.DecryptAndVerifyData(System.String)">
            <summary>
            解密接收到的加密数据并验证完整性，如果验证通过返回明文
            </summary>
            <param name="data">接收到的加密数据</param>
            <returns>解密并验证成功后，返回明文</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.CommunicationCryptor.EncryptData(System.String)">
            <summary>
            加密要发送的数据，包含签名，DES加密，RSA加密DES密钥等步骤
            </summary>
            <param name="data">要加密的正文明文数据</param>
            <returns>已加密待发送的密文</returns>
        </member>
        <member name="T:Infrastructure.Utility.Secutiry.DesHelper">
            <summary>
            DES / TripleDES加密解密操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.#ctor(System.Boolean)">
            <summary>
            使用随机密码初始化一个<see cref="T:Infrastructure.Utility.Secutiry.DesHelper"/>类的新实例
            </summary>
            <param name="isTriple">是否使用TripleDES方式，否则为DES方式</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.#ctor(System.Byte[])">
            <summary>
            使用指定8位或24位密码初始化一个<see cref="T:Infrastructure.Utility.Secutiry.DesHelper"/>类的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="source">要加密的字节数组</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="source">要解密的字节数组</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Encrypt(System.String)">
            <summary>
            加密字符串，输出BASE64编码字符串
            </summary>
            <param name="source">要加密的明文字符串</param>
            <returns>加密的BASE64编码的字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Decrypt(System.String)">
            <summary>
            解密字符串，输入为BASE64编码字符串
            </summary>
            <param name="source">要解密的BASE64编码的字符串</param>
            <returns>明文字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String)">
            <summary>
            整体加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.Int32)">
            <summary>
            分段加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="sectionLength">分段大小（字节）</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.DecryptFile(System.String,System.String)">
            <summary>
            对文件内容进行DES解密，能自动识别并处理是否为分段加密
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="source">要加密的字节数组</param>
            <param name="key">密钥字节数组，长度为8或者24</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="source">要解密的字节数组</param>
            <param name="key">密钥字节数组，长度为8或者24</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Encrypt(System.String,System.String)">
            <summary>
            加密字符串，输出BASE64编码字符串
            </summary>
            <param name="source">要加密的明文字符串</param>
            <param name="key">密钥字符串，长度为8或者24</param>
            <returns>加密的BASE64编码的字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.Decrypt(System.String,System.String)">
            <summary>
            解密字符串，输入BASE64编码字符串
            </summary>
            <param name="source">要解密的BASE64编码字符串</param>
            <param name="key">密钥字符串，长度为8或者24</param>
            <returns>解密的明文字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.String)">
            <summary>
            整体加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.Int32,System.String)">
            <summary>
            分段加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="sectionLength">分段大小（字节）</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.DesHelper.DecryptFile(System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES解密，能自动识别并处理是否为分段加密
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="P:Infrastructure.Utility.Secutiry.DesHelper.Key">
            <summary>
            获取 密钥
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Secutiry.HashHelper">
            <summary>
            字符串Hash操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.HashHelper.GetMd5(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的MD5哈希值
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.HashHelper.GetMd5(System.Byte[])">
            <summary>
            获取字节数组的MD5哈希值
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.HashHelper.GetSha1(System.String)">
            <summary>
            获取字符串的SHA1哈希值
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.HashHelper.GetSha256(System.String)">
            <summary>
            获取字符串的Sha256哈希值
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.HashHelper.GetSha512(System.String)">
            <summary>
            获取字符串的Sha512哈希值
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Secutiry.RsaHelper">
            <summary>
            RSA加密解密操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.#ctor">
            <summary>
            初始化一个<see cref="T:Infrastructure.Utility.Secutiry.RsaHelper"/>类的新实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.SignData(System.Byte[],System.String)">
            <summary>
            对明文进行签名，返回明文签名的字节数组
            </summary>
            <param name="source">要签名的明文字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>明文签名的字节数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.VerifyData(System.Byte[],System.Byte[],System.String)">
            <summary>
            验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密的明文字节数组</param>
            <param name="signData">明文签名字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.SignData(System.String,System.String)">
            <summary>
            对明文进行签名，返回明文签名的BASE64字符串
            </summary>
            <param name="source">要签名的明文</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>明文签名的BASE64字符串</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.VerifyData(System.String,System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密后的明文</param>
            <param name="signData">明文的签名</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Encrypt(System.Byte[],System.String)">
            <summary>
            使用指定公钥加密字节数组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Decrypt(System.Byte[],System.String)">
            <summary>
            使用私钥解密字节数组
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.SignData(System.Byte[],System.String,System.String)">
            <summary>
            使用指定私钥对明文进行签名，返回明文签名的字节数组
            </summary>
            <param name="source">要签名的明文字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="privateKey">私钥</param>
            <returns>明文签名的字节数组</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.VerifyData(System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密的明文字节数组</param>
            <param name="signData">明文签名字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="publicKey">公钥</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Encrypt(System.String,System.String)">
            <summary>
            使用指定公钥加密字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.Decrypt(System.String,System.String)">
            <summary>
            使用指定私钥解密字符串
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.SignData(System.String,System.String,System.String)">
            <summary>
            使用指定私钥签名字符串
            </summary>
            <param name="source">要签名的字符串</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Secutiry.RsaHelper.VerifyData(System.String,System.String,System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密得到的明文</param>
            <param name="signData">明文签名的BASE64字符串</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="publicKey">公钥</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="P:Infrastructure.Utility.Secutiry.RsaHelper.PublicKey">
            <summary>
            获取 公钥
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Secutiry.RsaHelper.PrivateKey">
            <summary>
            获取 私钥
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StackHelper.GetCallingMethod">
            <summary>
            获取当前调用的函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StackHelper.GetCallingType">
            <summary>
            获取当前调用的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StackHelper.GetCurrentMethod">
            <summary>
            获取当前函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StackHelper.GetCurrentClassName">
            <summary>
            获取当前类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Replace(System.String,System.String[],System.Func{System.String,System.String})">
            <summary>
            替换目标字符串中的所有oldValues数组中的字符串，并使用convert函数来转换返回新字符串
            </summary>
            <param name="instance">目标字符串</param>
            <param name="oldValues">需要替换的字符串数组</param>
            <param name="convert">转换函数</param>
            <returns>
            替换后的字符串
            </returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.IsEmpty(System.String)">
            <summary>
            判断字符串为null或者空或者空格.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.IsNotEmpty(System.String)">
            <summary>
            判断字符串不为null或者空或者空格.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Between(System.String,System.String,System.String)">
            <summary>
            返回两个字符串之间的字符串。
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Contains(System.String,System.String[])">
            <summary>
            只要字符串中是否存在其中一个，则返回True
            </summary>
            <param name="instance">目标字符串</param>
            <param name="args">字符串组</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.CreateDirectoryIfNotExist(System.String)">
            <summary>
            如果目录不存在，则创建目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToMD5Hash(System.String)">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToTitleCase(System.String)">
            <summary>
            Converts the first character of each word to Uppercase. Example: "the lazy dog" returns "The Lazy Dog"
            </summary>
            <param name="text">The text to convert to sentence case</param>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the first character of each word to Uppercase. Example: "the lazy dog" returns "The Lazy Dog"
            </summary>
            <param name="text">The text to convert to sentence case</param>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToTitleCase(System.String[])">
            <summary>
            Converts the first character of each word to Uppercase. Example: "the lazy dog" returns "The Lazy Dog"
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToTitleCase(System.String[],System.Globalization.CultureInfo)">
            <summary>
            Converts the first character of each word to Uppercase. Example: "the lazy dog" returns "The Lazy Dog"
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.IsLowerCamelCase(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToLowerCamelCase(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToLowerCamelCase(System.String[])">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToCamelCase(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToCamelCase(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToCamelCase(System.String[])">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.PadLeft(System.String,System.Char,System.Int32)">
            <summary>
            Pad the left side of a string with characters to make the total length.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.PadRight(System.String)">
            <summary>
            Pad the right side of a string with a '0' if a single character.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.PadRight(System.String,System.Char,System.Int32)">
            <summary>
            Pad the right side of a string with characters to make the total length.
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.LeftOf(System.String,System.Char)">
            <summary>
            Left of the first occurance of c
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.LeftOf(System.String,System.String)">
            <summary>
            Left of the first occurance of text
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.LeftOf(System.String,System.Char,System.Int32)">
            <summary>
            Left of the n'th occurance of c
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.RightOf(System.String,System.Char)">
            <summary>
            Right of the first occurance of c
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.RightOf(System.String,System.String)">
            <summary>
            Right of the first occurance of text
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.RightOf(System.String,System.Char,System.Int32)">
            <summary>
            Right of the n'th occurance of c
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.RightOf(System.String,System.String,System.Int32)">
            <summary>
            Right of the n'th occurance of c
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.LeftOfRightmostOf(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.LeftOfRightmostOf(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.RightOfRightmostOf(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.RightOfRightmostOf(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ReplaceLastInstanceOf(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ToCharacterSeparatedFileName(System.String,System.Char,System.String)">
            <summary>
            Accepts a string like "ArrowRotateClockwise" and returns "arrow_rotate_clockwise.png".
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Enquote(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.EnsureSemiColon(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Test(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Test(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Ellipsis(System.String,System.Int32)">
            <summary>
            Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
            </summary>
            <param name="text">The string to truncate</param>
            <param name="length">The maximum length to allow before truncating</param>
            <returns>The converted text</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Ellipsis(System.String,System.Int32,System.Boolean)">
            <summary>
            Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
            </summary>
            <param name="text">The string to truncate</param>
            <param name="length">The maximum length to allow before truncating</param>
            <param name="word">True to try to find a common work break</param>
            <returns>The converted text</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Base64Decode(System.String)">
            <summary>
            Base64 string decoder
            </summary>
            <param name="text">The text string to decode</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Base64Encode(System.String)">
            <summary>
            Base64 string encoder
            </summary>
            <param name="text">The text string to encode</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Randomize(System.String,System.Int32)">
            <summary>
            Generate a random string of character at a certain length
            </summary>
            <param name="chars">The Characters to use in the random string</param>
            <param name="length">The length of the random string</param>
            <returns>A string of random characters</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.Randomize(System.String)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.IsIntArraInStr(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            判断Int数组是否在字符串中
            </summary>
            <param name="str"></param>
            <param name="iArr"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.GetTheLastStrFromArraStr(System.String,System.Char)">
            <summary>
            获取最后一个分割字符串
            </summary>
            <param name="str"></param>
            <param name="spitChar"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ConvertStrToIntArr(System.String)">
            <summary>
            将可以字符串转换为int数组
            </summary>
            <param name="str">，1，2，3，  必须是前逗号后逗号格式</param>
            <returns>返回int数组，不排序</returns>
        </member>
        <member name="M:Infrastructure.Utility.StringUtils.ConvertIntArrToStr(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            将int数组转换为字符串格式
            </summary>
            <param name="intArr"></param>
            <returns>返回前逗号后逗号格式的字符串，字符串已排序</returns>
        </member>
        <member name="T:Infrastructure.Utility.Web.UserAgentHelper">
            <summary>
            UserAgent辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Web.UserAgentHelper.GetOperatingSystemName(System.String)">
            <summary>
            根据 UserAgent 获取操作系统名称
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Web.UserAgentHelper.GetBrowserName(System.String)">
            <summary>
            根据 UserAgent 获取浏览器名称
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Web.WebRequest">
            <summary>
            UserAgent辅助操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Web.WebRequest.doRequestHttpClient(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="strUrl"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Web.WebRequest.GetHtmlFromUrl(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Url"></param>
            <param name="strEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Utility.Windows.RegistryBaseKey">
            <summary>
            注册表基项域
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.RegistryBaseKey.ClassesRoot">
            <summary>
            对应于HKEY_CLASSES_ROOT主键
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.RegistryBaseKey.CurrentUser">
            <summary>
            对应于HKEY_CURRENT_USER主键
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.RegistryBaseKey.LocalMachine">
            <summary>
            对应于 HKEY_LOCAL_MACHINE主键
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.RegistryBaseKey.Users">
            <summary>
            对应于 HKEY_USER主键
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.RegistryBaseKey.CurrentConfig">
            <summary>
            对应于HEKY_CURRENT_CONFIG主键
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Windows.RegistryHelper">
            <summary>
            注册表辅助类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.#ctor">
            <summary>
            使用默认参数实例化一个注册表操作实例
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.#ctor(System.String)">
            <summary>
            使用参数实例化一个注册表操作实例
            </summary>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.#ctor(Infrastructure.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            使用参数实例化一个注册表操作实例
            </summary>
            <param name="baseKey">注册表基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.GetTopKey">
            <summary>
            获取注册表基项域对应顶级节点
            </summary>
            <returns>顶级节点</returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.GetTopKey(Infrastructure.Utility.Windows.RegistryBaseKey)">
            <summary>
            获取指定注册表基项域对应顶级节点
            </summary>
            <returns>顶级节点</returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.OpenSubKey(System.Boolean)">
            <summary>
            打开注册表项节点
            </summary>
            <param name="writable">true为只读访问，false为写访问</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.OpenSubKey(Infrastructure.Utility.Windows.RegistryBaseKey,System.String,System.Boolean)">
            <summary>
            打开注册表项节点，以只读的方式检查子项
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项名称</param>
            <param name="writable">true为只读访问，false为写访问</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.IsExistSubKey">
            <summary>
            是否存在注册表项
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.IsExistSubKey(Infrastructure.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            是否存在指定的注册表项
            </summary>
            <param name="baseKey">要检查的基项域</param>
            <param name="subKeyName">要检查的注册表项名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.IsExistValueName">
            <summary>
            检查是否存在键值
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.IsExistValueName(Infrastructure.Utility.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            检查指定注册表项中是否存在指定键值
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.CreateSubKey">
            <summary>
            创建注册表项
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.CreateSubKey(Infrastructure.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            在指定基项域中创建注册表项
            </summary>
            <param name="baseKey">定基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.DeleteSubKey">
            <summary>
            删除注册表项
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.DeleteSubKey(Infrastructure.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            删除指定基项域中的注册表项
            </summary>
            <param name="baseKey">指定基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.GetValue">
            <summary>
            获取键值内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.GetValue(Infrastructure.Utility.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            获取指定键值的内容
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.SetValue(System.Object)">
            <summary>
            设置键值的内容
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.SetValue(System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            设置键值的内容，并指定数据类型
            </summary>
            <param name="value">要设置的值</param>
            <param name="valueKind">设置值的数据类型</param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.SetValue(Infrastructure.Utility.Windows.RegistryBaseKey,System.String,System.String,System.Object)">
            <summary>
            设置指定键值的内容
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <param name="value"></param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.SetValue(Infrastructure.Utility.Windows.RegistryBaseKey,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            设置指定键值的内容，并指定数据类型
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <param name="value">要设置的值</param>
            <param name="valueKind">要设置的值的数据类型</param>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.DeleteValue">
            <summary>
            删除键值
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.RegistryHelper.DeleteValue(Infrastructure.Utility.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            删除指定的键值
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
        </member>
        <member name="P:Infrastructure.Utility.Windows.RegistryHelper.BaseKey">
            <summary>
            获取或设置注册表基项域
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.RegistryHelper.SubKeyName">
            <summary>
            注册表项名称
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.RegistryHelper.ValueName">
            <summary>
            键值名称
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Windows.SystemInfo">
            <summary>
            系统信息类
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.CpuName">
            <summary>
            获取或设置 CPU型号
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.CpuId">
            <summary>
            获取或设置 CPU编号
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.BoardName">
            <summary>
            获取或设置 主板型号
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.BoardId">
            <summary>
            获取或设置 主板编号
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.DiskName">
            <summary>
            获取或设置 硬盘型号
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.DiskId">
            <summary>
            获取或设置 硬盘编号
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.OSName">
            <summary>
            获取或设置 操作系统名称
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.OSCsdVersion">
            <summary>
            获取或设置 操作系统补丁版本
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.OSIs64Bit">
            <summary>
            获取或设置 是否64位操作系统
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.OSVersion">
            <summary>
            获取或设置 操作系统版本
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.OSPath">
            <summary>
            获取或设置 操作系统路径
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.PhysicalMemoryFree">
            <summary>
            获取或设置 可用物理内存，单位：MB
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.PhysicalMemoryTotal">
            <summary>
            获取或设置 总共物理内存，单位：MB
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.ScreenWith">
            <summary>
            获取或设置 屏幕分辨率宽
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.ScreenHeight">
            <summary>
            获取或设置 屏幕分辨率高
            </summary>
        </member>
        <member name="P:Infrastructure.Utility.Windows.SystemInfo.ScreenColorDepth">
            <summary>
            获取或设置 屏幕色深
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Windows.SystemInfoHandler">
            <summary>
            获取系统硬件、软件信息
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetWmiInfos(Infrastructure.Utility.Windows.WMIPath)">
            <summary>
            获取指定WMI路径的信息集合
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetHardwareId">
            <summary>
            获取硬件信息标识
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetHardwareId(System.String)">
            <summary>
            由指定字符串生成硬件信息标识
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetOperationSystemName">
            <summary>
            获取操作系统名称
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetSystemInfo">
            <summary>
            获取系统信息
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetProcessNames">
            <summary>
            获取当前系统运行的进程列表
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetStartedServiceNamesEnumerable">
            <summary>
            获取当前系统正在运行的服务列表
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.Windows.SystemInfoHandler.GetMaxFreeSizeLogicalDisk">
            <summary>
            获取剩余空间最大的逻辑磁盘名称
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.Windows.WMIPath">
            <summary>
            表示WMI地址的枚举
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Processor">
            <summary>
            CPU 处理器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_PhysicalMemory">
            <summary>
            物理内存条
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Keyboard">
            <summary>
            键盘
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_PointingDevice">
            <summary>
            点输入设备，包括鼠标。
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_FloppyDrive">
            <summary>
            软盘驱动器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_DiskDrive">
            <summary>
            硬盘驱动器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_CDROMDrive">
            <summary>
            光盘驱动器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_BaseBoard">
            <summary>
            主板
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_BIOS">
            <summary>
            BIOS 芯片
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_ParallelPort">
            <summary>
            并口
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_SerialPort">
            <summary>
            串口
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_SerialPortConfiguration">
            <summary>
            串口配置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_SoundDevice">
            <summary>
            多媒体设置，一般指声卡。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Infrastructure.Utility.Windows.WMIPath.Win32_SystemSlot" -->
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_USBController">
            <summary>
            USB 控制器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_NetworkAdapter">
            <summary>
            网络适配器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_NetworkAdapterConfiguration">
            <summary>
            网络适配器设置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Printer">
            <summary>
            打印机
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_PrinterConfiguration">
            <summary>
            打印机设置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_PrintJob">
            <summary>
            打印机任务
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_TCPIPPrinterPort">
            <summary>
            打印机端口
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_POTSModem">
            <summary>
            MODEM
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_POTSModemToSerialPort">
            <summary>
            MODEM 端口
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_DesktopMonitor">
            <summary>
            显示器
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_DisplayConfiguration">
            <summary>
            显卡
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_DisplayControllerConfiguration">
            <summary>
            显卡设置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_VideoController">
            <summary>
            显卡细节
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_VideoSettings">
            <summary>
            显卡支持的显示模式
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_TimeZone">
            <summary>
            时区
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_SystemDriver">
            <summary>
            驱动程序
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_DiskPartition">
            <summary>
            磁盘分区
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_LogicalDisk">
            <summary>
            逻辑磁盘
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_LogicalDiskToPartition">
            <summary>
            逻辑磁盘所在分区及始末位置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_LogicalMemoryConfiguration">
            <summary>
            逻辑内存配置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_PageFile">
            <summary>
            系统页文件信息
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_PageFileSetting">
            <summary>
            页文件设置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_BootConfiguration">
            <summary>
            系统启动配置
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_ComputerSystem">
            <summary>
            计算机信息简要
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_OperatingSystem">
            <summary>
            操作系统信息
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_StartupCommand">
            <summary>
            系统自动启动程序
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Service">
            <summary>
            系统安装的服务
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Group">
            <summary>
            系统管理组
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_GroupUser">
            <summary>
            系统组帐号
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_UserAccount">
            <summary>
            用户帐号
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Process">
            <summary>
            系统进程
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Thread">
            <summary>
            系统线程
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_Share">
            <summary>
            共享
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_NetworkClient">
            <summary>
            已安装的网络客户端
            </summary>
        </member>
        <member name="F:Infrastructure.Utility.Windows.WMIPath.Win32_NetworkProtocol">
            <summary>
            已安装的网络协议
            </summary>
        </member>
        <member name="T:Infrastructure.Utility.SharpZip">
            <summary>
            压缩、解压缩类
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.SharpZip.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.SharpZip.PackFiles(System.String,System.String,System.String)">
            <summary>
            压缩
            </summary> 
            <param name="filename"> 压缩后的文件名(包含物理路径)</param>
            <param name="directory">待压缩的文件夹(包含物理路径)</param>
        </member>
        <member name="M:Infrastructure.Utility.SharpZip.UnpackFiles(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="file">待解压文件名(包含物理路径)</param>
            <param name="dir"> 解压到哪个目录中(包含物理路径)</param>
        </member>
        <member name="M:Infrastructure.Utility.ClassZip.ZipFileDictory(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归压缩文件夹方法
            </summary>
        </member>
        <member name="M:Infrastructure.Utility.ClassZip.ZipFileDictory(System.String,System.String,System.Int32)">
            <summary>
            压缩目录
            </summary>
            <param name="FolderToZip">待压缩的文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后的文件名，全路径格式</param>
        </member>
        <member name="M:Infrastructure.Utility.ClassZip.ZipFile(System.String,System.String,System.Int32)">
            <summary>
            压缩文件
            </summary>
            <param name="FileToZip">要进行压缩的文件名</param>
            <param name="ZipedFile">压缩后生成的压缩文件名</param>
        </member>
        <member name="M:Infrastructure.Utility.ClassZip.Zip(System.String,System.String,System.Int32)">
            <summary>
            压缩
            </summary>
            <param name="FileToZip">待压缩的文件目录</param>
            <param name="ZipedFile">生成的目标文件</param>
            <param name="level">6</param>
        </member>
        <member name="M:Infrastructure.Utility.ClassZip.UnZip(System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="FileToUpZip">待解压的文件</param>
            <param name="ZipedFolder">解压目标存放目录</param>
        </member>
        <member name="M:Infrastructure.Utility.ZipHelper.EnZip(System.String,System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要压缩的文件目录</param>
            <param name="dirpath">初始目录</param>
        </member>
        <member name="M:Infrastructure.Utility.ZipHelper.DeZip(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要解压的文件路径</param>
        </member>
    </members>
</doc>
